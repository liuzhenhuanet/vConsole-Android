(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["vue-router"],{"8c4f":function(t,r,n){"use strict";
/*!
  * vue-router v3.0.2
  * (c) 2018 Evan You
  * @license MIT
  */function e(t,r){0}function i(t){return Object.prototype.toString.call(t).indexOf("Error")>-1}function o(t,r){for(var n in r)t[n]=r[n];return t}var a={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,r){var n=r.props,e=r.children,i=r.parent,a=r.data;a.routerView=!0;var c=i.$createElement,p=n.name,s=i.$route,f=i._routerViewCache||(i._routerViewCache={}),h=0,y=!1;while(i&&i._routerRoot!==i)i.$vnode&&i.$vnode.data.routerView&&h++,i._inactive&&(y=!0),i=i.$parent;if(a.routerViewDepth=h,y)return c(f[p],a,e);var v=s.matched[h];if(!v)return f[p]=null,c();var d=f[p]=v.components[p];a.registerRouteInstance=function(t,r){var n=v.instances[p];(r&&n!==t||!r&&n===t)&&(v.instances[p]=r)},(a.hook||(a.hook={})).prepatch=function(t,r){v.instances[p]=r.componentInstance};var l=a.props=u(s,v.props&&v.props[p]);if(l){l=a.props=o({},l);var w=a.attrs=a.attrs||{};for(var b in l)d.props&&b in d.props||(w[b]=l[b],delete l[b])}return c(d,a,e)}};function u(t,r){switch(typeof r){case"undefined":return;case"object":return r;case"function":return r(t);case"boolean":return r?t.params:void 0;default:0}}var c=/[!'()*]/g,p=function(t){return"%"+t.charCodeAt(0).toString(16)},s=/%2C/g,f=function(t){return encodeURIComponent(t).replace(c,p).replace(s,",")},h=decodeURIComponent;function y(t,r,n){void 0===r&&(r={});var e,i=n||v;try{e=i(t||"")}catch(a){e={}}for(var o in r)e[o]=r[o];return e}function v(t){var r={};return t=t.trim().replace(/^(\?|#|&)/,""),t?(t.split("&").forEach(function(t){var n=t.replace(/\+/g," ").split("="),e=h(n.shift()),i=n.length>0?h(n.join("=")):null;void 0===r[e]?r[e]=i:Array.isArray(r[e])?r[e].push(i):r[e]=[r[e],i]}),r):r}function d(t){var r=t?Object.keys(t).map(function(r){var n=t[r];if(void 0===n)return"";if(null===n)return f(r);if(Array.isArray(n)){var e=[];return n.forEach(function(t){void 0!==t&&(null===t?e.push(f(r)):e.push(f(r)+"="+f(t)))}),e.join("&")}return f(r)+"="+f(n)}).filter(function(t){return t.length>0}).join("&"):null;return r?"?"+r:""}var l=/\/?$/;function w(t,r,n,e){var i=e&&e.options.stringifyQuery,o=r.query||{};try{o=b(o)}catch(u){}var a={name:r.name||t&&t.name,meta:t&&t.meta||{},path:r.path||"/",hash:r.hash||"",query:o,params:r.params||{},fullPath:x(r,i),matched:t?m(t):[]};return n&&(a.redirectedFrom=x(n,i)),Object.freeze(a)}function b(t){if(Array.isArray(t))return t.map(b);if(t&&"object"===typeof t){var r={};for(var n in t)r[n]=b(t[n]);return r}return t}var g=w(null,{path:"/"});function m(t){var r=[];while(t)r.unshift(t),t=t.parent;return r}function x(t,r){var n=t.path,e=t.query;void 0===e&&(e={});var i=t.hash;void 0===i&&(i="");var o=r||d;return(n||"/")+o(e)+i}function R(t,r){return r===g?t===r:!!r&&(t.path&&r.path?t.path.replace(l,"")===r.path.replace(l,"")&&t.hash===r.hash&&C(t.query,r.query):!(!t.name||!r.name)&&(t.name===r.name&&t.hash===r.hash&&C(t.query,r.query)&&C(t.params,r.params)))}function C(t,r){if(void 0===t&&(t={}),void 0===r&&(r={}),!t||!r)return t===r;var n=Object.keys(t),e=Object.keys(r);return n.length===e.length&&n.every(function(n){var e=t[n],i=r[n];return"object"===typeof e&&"object"===typeof i?C(e,i):String(e)===String(i)})}function E(t,r){return 0===t.path.replace(l,"/").indexOf(r.path.replace(l,"/"))&&(!r.hash||t.hash===r.hash)&&O(t.query,r.query)}function O(t,r){for(var n in r)if(!(n in t))return!1;return!0}var _,A=[String,Object],T=[String,Array],$={name:"RouterLink",props:{to:{type:A,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:T,default:"click"}},render:function(t){var r=this,n=this.$router,e=this.$route,i=n.resolve(this.to,e,this.append),a=i.location,u=i.route,c=i.href,p={},s=n.options.linkActiveClass,f=n.options.linkExactActiveClass,h=null==s?"router-link-active":s,y=null==f?"router-link-exact-active":f,v=null==this.activeClass?h:this.activeClass,d=null==this.exactActiveClass?y:this.exactActiveClass,l=a.path?w(null,a,null,n):u;p[d]=R(e,l),p[v]=this.exact?p[d]:E(e,l);var b=function(t){L(t)&&(r.replace?n.replace(a):n.push(a))},g={click:L};Array.isArray(this.event)?this.event.forEach(function(t){g[t]=b}):g[this.event]=b;var m={class:p};if("a"===this.tag)m.on=g,m.attrs={href:c};else{var x=q(this.$slots.default);if(x){x.isStatic=!1;var C=x.data=o({},x.data);C.on=g;var O=x.data.attrs=o({},x.data.attrs);O.href=c}else m.on=g}return t(this.tag,m,this.$slots.default)}};function L(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)&&!t.defaultPrevented&&(void 0===t.button||0===t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){var r=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(r))return}return t.preventDefault&&t.preventDefault(),!0}}function q(t){if(t)for(var r,n=0;n<t.length;n++){if(r=t[n],"a"===r.tag)return r;if(r.children&&(r=q(r.children)))return r}}function U(t){if(!U.installed||_!==t){U.installed=!0,_=t;var r=function(t){return void 0!==t},n=function(t,n){var e=t.$options._parentVnode;r(e)&&r(e=e.data)&&r(e=e.registerRouteInstance)&&e(t,n)};t.mixin({beforeCreate:function(){r(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,n(this,this)},destroyed:function(){n(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",a),t.component("RouterLink",$);var e=t.config.optionMergeStrategies;e.beforeRouteEnter=e.beforeRouteLeave=e.beforeRouteUpdate=e.created}}var I="undefined"!==typeof window;function B(t,r,n){var e=t.charAt(0);if("/"===e)return t;if("?"===e||"#"===e)return r+t;var i=r.split("/");n&&i[i.length-1]||i.pop();for(var o=t.replace(/^\//,"").split("/"),a=0;a<o.length;a++){var u=o[a];".."===u?i.pop():"."!==u&&i.push(u)}return""!==i[0]&&i.unshift(""),i.join("/")}function H(t){var r="",n="",e=t.indexOf("#");e>=0&&(r=t.slice(e),t=t.slice(0,e));var i=t.indexOf("?");return i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),{path:t,query:n,hash:r}}function M(t){return t.replace(/\/\//g,"/")}var V=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},J=et,K=D,F=W,Q=P,X=nt,Y=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function D(t,r){var n,e=[],i=0,o=0,a="",u=r&&r.delimiter||"/";while(null!=(n=Y.exec(t))){var c=n[0],p=n[1],s=n.index;if(a+=t.slice(o,s),o=s+c.length,p)a+=p[1];else{var f=t[o],h=n[2],y=n[3],v=n[4],d=n[5],l=n[6],w=n[7];a&&(e.push(a),a="");var b=null!=h&&null!=f&&f!==h,g="+"===l||"*"===l,m="?"===l||"*"===l,x=n[2]||u,R=v||d;e.push({name:y||i++,prefix:h||"",delimiter:x,optional:m,repeat:g,partial:b,asterisk:!!w,pattern:R?z(R):w?".*":"[^"+S(x)+"]+?"})}}return o<t.length&&(a+=t.substr(o)),a&&e.push(a),e}function W(t,r){return P(D(t,r))}function G(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function Z(t){return encodeURI(t).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function P(t){for(var r=new Array(t.length),n=0;n<t.length;n++)"object"===typeof t[n]&&(r[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,e){for(var i="",o=n||{},a=e||{},u=a.pretty?G:encodeURIComponent,c=0;c<t.length;c++){var p=t[c];if("string"!==typeof p){var s,f=o[p.name];if(null==f){if(p.optional){p.partial&&(i+=p.prefix);continue}throw new TypeError('Expected "'+p.name+'" to be defined')}if(V(f)){if(!p.repeat)throw new TypeError('Expected "'+p.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(p.optional)continue;throw new TypeError('Expected "'+p.name+'" to not be empty')}for(var h=0;h<f.length;h++){if(s=u(f[h]),!r[c].test(s))throw new TypeError('Expected all "'+p.name+'" to match "'+p.pattern+'", but received `'+JSON.stringify(s)+"`");i+=(0===h?p.prefix:p.delimiter)+s}}else{if(s=p.asterisk?Z(f):u(f),!r[c].test(s))throw new TypeError('Expected "'+p.name+'" to match "'+p.pattern+'", but received "'+s+'"');i+=p.prefix+s}}else i+=p}return i}}function S(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function z(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function N(t,r){return t.keys=r,t}function j(t){return t.sensitive?"":"i"}function k(t,r){var n=t.source.match(/\((?!\?)/g);if(n)for(var e=0;e<n.length;e++)r.push({name:e,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return N(t,r)}function tt(t,r,n){for(var e=[],i=0;i<t.length;i++)e.push(et(t[i],r,n).source);var o=new RegExp("(?:"+e.join("|")+")",j(n));return N(o,r)}function rt(t,r,n){return nt(D(t,n),r,n)}function nt(t,r,n){V(r)||(n=r||n,r=[]),n=n||{};for(var e=n.strict,i=!1!==n.end,o="",a=0;a<t.length;a++){var u=t[a];if("string"===typeof u)o+=S(u);else{var c=S(u.prefix),p="(?:"+u.pattern+")";r.push(u),u.repeat&&(p+="(?:"+c+p+")*"),p=u.optional?u.partial?c+"("+p+")?":"(?:"+c+"("+p+"))?":c+"("+p+")",o+=p}}var s=S(n.delimiter||"/"),f=o.slice(-s.length)===s;return e||(o=(f?o.slice(0,-s.length):o)+"(?:"+s+"(?=$))?"),o+=i?"$":e&&f?"":"(?="+s+"|$)",N(new RegExp("^"+o,j(n)),r)}function et(t,r,n){return V(r)||(n=r||n,r=[]),n=n||{},t instanceof RegExp?k(t,r):V(t)?tt(t,r,n):rt(t,r,n)}J.parse=K,J.compile=F,J.tokensToFunction=Q,J.tokensToRegExp=X;var it=Object.create(null);function ot(t,r,n){try{var e=it[t]||(it[t]=J.compile(t));return e(r||{},{pretty:!0})}catch(i){return""}}function at(t,r,n,e){var i=r||[],o=n||Object.create(null),a=e||Object.create(null);t.forEach(function(t){ut(i,o,a,t)});for(var u=0,c=i.length;u<c;u++)"*"===i[u]&&(i.push(i.splice(u,1)[0]),c--,u--);return{pathList:i,pathMap:o,nameMap:a}}function ut(t,r,n,e,i,o){var a=e.path,u=e.name;var c=e.pathToRegexpOptions||{},p=pt(a,i,c.strict);"boolean"===typeof e.caseSensitive&&(c.sensitive=e.caseSensitive);var s={path:p,regex:ct(p,c),components:e.components||{default:e.component},instances:{},name:u,parent:i,matchAs:o,redirect:e.redirect,beforeEnter:e.beforeEnter,meta:e.meta||{},props:null==e.props?{}:e.components?e.props:{default:e.props}};if(e.children&&e.children.forEach(function(e){var i=o?M(o+"/"+e.path):void 0;ut(t,r,n,e,s,i)}),void 0!==e.alias){var f=Array.isArray(e.alias)?e.alias:[e.alias];f.forEach(function(o){var a={path:o,children:e.children};ut(t,r,n,a,i,s.path||"/")})}r[s.path]||(t.push(s.path),r[s.path]=s),u&&(n[u]||(n[u]=s))}function ct(t,r){var n=J(t,[],r);return n}function pt(t,r,n){return n||(t=t.replace(/\/$/,"")),"/"===t[0]?t:null==r?t:M(r.path+"/"+t)}function st(t,r,n,e){var i="string"===typeof t?{path:t}:t;if(i.name||i._normalized)return i;if(!i.path&&i.params&&r){i=o({},i),i._normalized=!0;var a=o(o({},r.params),i.params);if(r.name)i.name=r.name,i.params=a;else if(r.matched.length){var u=r.matched[r.matched.length-1].path;i.path=ot(u,a,"path "+r.path)}else 0;return i}var c=H(i.path||""),p=r&&r.path||"/",s=c.path?B(c.path,p,n||i.append):p,f=y(c.query,i.query,e&&e.options.parseQuery),h=i.hash||c.hash;return h&&"#"!==h.charAt(0)&&(h="#"+h),{_normalized:!0,path:s,query:f,hash:h}}function ft(t,r){var n=at(t),e=n.pathList,i=n.pathMap,o=n.nameMap;function a(t){at(t,e,i,o)}function u(t,n,a){var u=st(t,n,!1,r),c=u.name;if(c){var p=o[c];if(!p)return s(null,u);var f=p.regex.keys.filter(function(t){return!t.optional}).map(function(t){return t.name});if("object"!==typeof u.params&&(u.params={}),n&&"object"===typeof n.params)for(var h in n.params)!(h in u.params)&&f.indexOf(h)>-1&&(u.params[h]=n.params[h]);if(p)return u.path=ot(p.path,u.params,'named route "'+c+'"'),s(p,u,a)}else if(u.path){u.params={};for(var y=0;y<e.length;y++){var v=e[y],d=i[v];if(ht(d.regex,u.path,u.params))return s(d,u,a)}}return s(null,u)}function c(t,n){var e=t.redirect,i="function"===typeof e?e(w(t,n,null,r)):e;if("string"===typeof i&&(i={path:i}),!i||"object"!==typeof i)return s(null,n);var a=i,c=a.name,p=a.path,f=n.query,h=n.hash,y=n.params;if(f=a.hasOwnProperty("query")?a.query:f,h=a.hasOwnProperty("hash")?a.hash:h,y=a.hasOwnProperty("params")?a.params:y,c){o[c];return u({_normalized:!0,name:c,query:f,hash:h,params:y},void 0,n)}if(p){var v=yt(p,t),d=ot(v,y,'redirect route with path "'+v+'"');return u({_normalized:!0,path:d,query:f,hash:h},void 0,n)}return s(null,n)}function p(t,r,n){var e=ot(n,r.params,'aliased route with path "'+n+'"'),i=u({_normalized:!0,path:e});if(i){var o=i.matched,a=o[o.length-1];return r.params=i.params,s(a,r)}return s(null,r)}function s(t,n,e){return t&&t.redirect?c(t,e||n):t&&t.matchAs?p(t,n,t.matchAs):w(t,n,e,r)}return{match:u,addRoutes:a}}function ht(t,r,n){var e=r.match(t);if(!e)return!1;if(!n)return!0;for(var i=1,o=e.length;i<o;++i){var a=t.keys[i-1],u="string"===typeof e[i]?decodeURIComponent(e[i]):e[i];a&&(n[a.name||"pathMatch"]=u)}return!0}function yt(t,r){return B(t,r.parent?r.parent.path:"/",!0)}var vt=Object.create(null);function dt(){window.history.replaceState({key:$t()},"",window.location.href.replace(window.location.origin,"")),window.addEventListener("popstate",function(t){wt(),t.state&&t.state.key&&Lt(t.state.key)})}function lt(t,r,n,e){if(t.app){var i=t.options.scrollBehavior;i&&t.app.$nextTick(function(){var o=bt(),a=i.call(t,r,n,e?o:null);a&&("function"===typeof a.then?a.then(function(t){Et(t,o)}).catch(function(t){0}):Et(a,o))})}}function wt(){var t=$t();t&&(vt[t]={x:window.pageXOffset,y:window.pageYOffset})}function bt(){var t=$t();if(t)return vt[t]}function gt(t,r){var n=document.documentElement,e=n.getBoundingClientRect(),i=t.getBoundingClientRect();return{x:i.left-e.left-r.x,y:i.top-e.top-r.y}}function mt(t){return Ct(t.x)||Ct(t.y)}function xt(t){return{x:Ct(t.x)?t.x:window.pageXOffset,y:Ct(t.y)?t.y:window.pageYOffset}}function Rt(t){return{x:Ct(t.x)?t.x:0,y:Ct(t.y)?t.y:0}}function Ct(t){return"number"===typeof t}function Et(t,r){var n="object"===typeof t;if(n&&"string"===typeof t.selector){var e=document.querySelector(t.selector);if(e){var i=t.offset&&"object"===typeof t.offset?t.offset:{};i=Rt(i),r=gt(e,i)}else mt(t)&&(r=xt(t))}else n&&mt(t)&&(r=xt(t));r&&window.scrollTo(r.x,r.y)}var Ot=I&&function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}(),_t=I&&window.performance&&window.performance.now?window.performance:Date,At=Tt();function Tt(){return _t.now().toFixed(3)}function $t(){return At}function Lt(t){At=t}function qt(t,r){wt();var n=window.history;try{r?n.replaceState({key:At},"",t):(At=Tt(),n.pushState({key:At},"",t))}catch(e){window.location[r?"replace":"assign"](t)}}function Ut(t){qt(t,!0)}function It(t,r,n){var e=function(i){i>=t.length?n():t[i]?r(t[i],function(){e(i+1)}):e(i+1)};e(0)}function Bt(t){return function(r,n,e){var o=!1,a=0,u=null;Ht(t,function(t,r,n,c){if("function"===typeof t&&void 0===t.cid){o=!0,a++;var p,s=Kt(function(r){Jt(r)&&(r=r.default),t.resolved="function"===typeof r?r:_.extend(r),n.components[c]=r,a--,a<=0&&e()}),f=Kt(function(t){var r="Failed to resolve async component "+c+": "+t;u||(u=i(t)?t:new Error(r),e(u))});try{p=t(s,f)}catch(y){f(y)}if(p)if("function"===typeof p.then)p.then(s,f);else{var h=p.component;h&&"function"===typeof h.then&&h.then(s,f)}}}),o||e()}}function Ht(t,r){return Mt(t.map(function(t){return Object.keys(t.components).map(function(n){return r(t.components[n],t.instances[n],t,n)})}))}function Mt(t){return Array.prototype.concat.apply([],t)}var Vt="function"===typeof Symbol&&"symbol"===typeof Symbol.toStringTag;function Jt(t){return t.__esModule||Vt&&"Module"===t[Symbol.toStringTag]}function Kt(t){var r=!1;return function(){var n=[],e=arguments.length;while(e--)n[e]=arguments[e];if(!r)return r=!0,t.apply(this,n)}}var Ft=function(t,r){this.router=t,this.base=Qt(r),this.current=g,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function Qt(t){if(!t)if(I){var r=document.querySelector("base");t=r&&r.getAttribute("href")||"/",t=t.replace(/^https?:\/\/[^\/]+/,"")}else t="/";return"/"!==t.charAt(0)&&(t="/"+t),t.replace(/\/$/,"")}function Xt(t,r){var n,e=Math.max(t.length,r.length);for(n=0;n<e;n++)if(t[n]!==r[n])break;return{updated:r.slice(0,n),activated:r.slice(n),deactivated:t.slice(n)}}function Yt(t,r,n,e){var i=Ht(t,function(t,e,i,o){var a=Dt(t,r);if(a)return Array.isArray(a)?a.map(function(t){return n(t,e,i,o)}):n(a,e,i,o)});return Mt(e?i.reverse():i)}function Dt(t,r){return"function"!==typeof t&&(t=_.extend(t)),t.options[r]}function Wt(t){return Yt(t,"beforeRouteLeave",Zt,!0)}function Gt(t){return Yt(t,"beforeRouteUpdate",Zt)}function Zt(t,r){if(r)return function(){return t.apply(r,arguments)}}function Pt(t,r,n){return Yt(t,"beforeRouteEnter",function(t,e,i,o){return St(t,i,o,r,n)})}function St(t,r,n,e,i){return function(o,a,u){return t(o,a,function(t){u(t),"function"===typeof t&&e.push(function(){zt(t,r.instances,n,i)})})}}function zt(t,r,n,e){r[n]&&!r[n]._isBeingDestroyed?t(r[n]):e()&&setTimeout(function(){zt(t,r,n,e)},16)}Ft.prototype.listen=function(t){this.cb=t},Ft.prototype.onReady=function(t,r){this.ready?t():(this.readyCbs.push(t),r&&this.readyErrorCbs.push(r))},Ft.prototype.onError=function(t){this.errorCbs.push(t)},Ft.prototype.transitionTo=function(t,r,n){var e=this,i=this.router.match(t,this.current);this.confirmTransition(i,function(){e.updateRoute(i),r&&r(i),e.ensureURL(),e.ready||(e.ready=!0,e.readyCbs.forEach(function(t){t(i)}))},function(t){n&&n(t),t&&!e.ready&&(e.ready=!0,e.readyErrorCbs.forEach(function(r){r(t)}))})},Ft.prototype.confirmTransition=function(t,r,n){var o=this,a=this.current,u=function(t){i(t)&&(o.errorCbs.length?o.errorCbs.forEach(function(r){r(t)}):(e(!1,"uncaught error during route navigation:"),console.error(t))),n&&n(t)};if(R(t,a)&&t.matched.length===a.matched.length)return this.ensureURL(),u();var c=Xt(this.current.matched,t.matched),p=c.updated,s=c.deactivated,f=c.activated,h=[].concat(Wt(s),this.router.beforeHooks,Gt(p),f.map(function(t){return t.beforeEnter}),Bt(f));this.pending=t;var y=function(r,n){if(o.pending!==t)return u();try{r(t,a,function(t){!1===t||i(t)?(o.ensureURL(!0),u(t)):"string"===typeof t||"object"===typeof t&&("string"===typeof t.path||"string"===typeof t.name)?(u(),"object"===typeof t&&t.replace?o.replace(t):o.push(t)):n(t)})}catch(e){u(e)}};It(h,y,function(){var n=[],e=function(){return o.current===t},i=Pt(f,n,e),a=i.concat(o.router.resolveHooks);It(a,y,function(){if(o.pending!==t)return u();o.pending=null,r(t),o.router.app&&o.router.app.$nextTick(function(){n.forEach(function(t){t()})})})})},Ft.prototype.updateRoute=function(t){var r=this.current;this.current=t,this.cb&&this.cb(t),this.router.afterHooks.forEach(function(n){n&&n(t,r)})};var Nt=function(t){function r(r,n){var e=this;t.call(this,r,n);var i=r.options.scrollBehavior,o=Ot&&i;o&&dt();var a=jt(this.base);window.addEventListener("popstate",function(t){var n=e.current,i=jt(e.base);e.current===g&&i===a||e.transitionTo(i,function(t){o&&lt(r,t,n,!0)})})}return t&&(r.__proto__=t),r.prototype=Object.create(t&&t.prototype),r.prototype.constructor=r,r.prototype.go=function(t){window.history.go(t)},r.prototype.push=function(t,r,n){var e=this,i=this,o=i.current;this.transitionTo(t,function(t){qt(M(e.base+t.fullPath)),lt(e.router,t,o,!1),r&&r(t)},n)},r.prototype.replace=function(t,r,n){var e=this,i=this,o=i.current;this.transitionTo(t,function(t){Ut(M(e.base+t.fullPath)),lt(e.router,t,o,!1),r&&r(t)},n)},r.prototype.ensureURL=function(t){if(jt(this.base)!==this.current.fullPath){var r=M(this.base+this.current.fullPath);t?qt(r):Ut(r)}},r.prototype.getCurrentLocation=function(){return jt(this.base)},r}(Ft);function jt(t){var r=decodeURI(window.location.pathname);return t&&0===r.indexOf(t)&&(r=r.slice(t.length)),(r||"/")+window.location.search+window.location.hash}var kt=function(t){function r(r,n,e){t.call(this,r,n),e&&tr(this.base)||rr()}return t&&(r.__proto__=t),r.prototype=Object.create(t&&t.prototype),r.prototype.constructor=r,r.prototype.setupListeners=function(){var t=this,r=this.router,n=r.options.scrollBehavior,e=Ot&&n;e&&dt(),window.addEventListener(Ot?"popstate":"hashchange",function(){var r=t.current;rr()&&t.transitionTo(nr(),function(n){e&&lt(t.router,n,r,!0),Ot||or(n.fullPath)})})},r.prototype.push=function(t,r,n){var e=this,i=this,o=i.current;this.transitionTo(t,function(t){ir(t.fullPath),lt(e.router,t,o,!1),r&&r(t)},n)},r.prototype.replace=function(t,r,n){var e=this,i=this,o=i.current;this.transitionTo(t,function(t){or(t.fullPath),lt(e.router,t,o,!1),r&&r(t)},n)},r.prototype.go=function(t){window.history.go(t)},r.prototype.ensureURL=function(t){var r=this.current.fullPath;nr()!==r&&(t?ir(r):or(r))},r.prototype.getCurrentLocation=function(){return nr()},r}(Ft);function tr(t){var r=jt(t);if(!/^\/#/.test(r))return window.location.replace(M(t+"/#"+r)),!0}function rr(){var t=nr();return"/"===t.charAt(0)||(or("/"+t),!1)}function nr(){var t=window.location.href,r=t.indexOf("#");return-1===r?"":decodeURI(t.slice(r+1))}function er(t){var r=window.location.href,n=r.indexOf("#"),e=n>=0?r.slice(0,n):r;return e+"#"+t}function ir(t){Ot?qt(er(t)):window.location.hash=t}function or(t){Ot?Ut(er(t)):window.location.replace(er(t))}var ar=function(t){function r(r,n){t.call(this,r,n),this.stack=[],this.index=-1}return t&&(r.__proto__=t),r.prototype=Object.create(t&&t.prototype),r.prototype.constructor=r,r.prototype.push=function(t,r,n){var e=this;this.transitionTo(t,function(t){e.stack=e.stack.slice(0,e.index+1).concat(t),e.index++,r&&r(t)},n)},r.prototype.replace=function(t,r,n){var e=this;this.transitionTo(t,function(t){e.stack=e.stack.slice(0,e.index).concat(t),r&&r(t)},n)},r.prototype.go=function(t){var r=this,n=this.index+t;if(!(n<0||n>=this.stack.length)){var e=this.stack[n];this.confirmTransition(e,function(){r.index=n,r.updateRoute(e)})}},r.prototype.getCurrentLocation=function(){var t=this.stack[this.stack.length-1];return t?t.fullPath:"/"},r.prototype.ensureURL=function(){},r}(Ft),ur=function(t){void 0===t&&(t={}),this.app=null,this.apps=[],this.options=t,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=ft(t.routes||[],this);var r=t.mode||"hash";switch(this.fallback="history"===r&&!Ot&&!1!==t.fallback,this.fallback&&(r="hash"),I||(r="abstract"),this.mode=r,r){case"history":this.history=new Nt(this,t.base);break;case"hash":this.history=new kt(this,t.base,this.fallback);break;case"abstract":this.history=new ar(this,t.base);break;default:0}},cr={currentRoute:{configurable:!0}};function pr(t,r){return t.push(r),function(){var n=t.indexOf(r);n>-1&&t.splice(n,1)}}function sr(t,r,n){var e="hash"===n?"#"+r:r;return t?M(t+"/"+e):e}ur.prototype.match=function(t,r,n){return this.matcher.match(t,r,n)},cr.currentRoute.get=function(){return this.history&&this.history.current},ur.prototype.init=function(t){var r=this;if(this.apps.push(t),!this.app){this.app=t;var n=this.history;if(n instanceof Nt)n.transitionTo(n.getCurrentLocation());else if(n instanceof kt){var e=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),e,e)}n.listen(function(t){r.apps.forEach(function(r){r._route=t})})}},ur.prototype.beforeEach=function(t){return pr(this.beforeHooks,t)},ur.prototype.beforeResolve=function(t){return pr(this.resolveHooks,t)},ur.prototype.afterEach=function(t){return pr(this.afterHooks,t)},ur.prototype.onReady=function(t,r){this.history.onReady(t,r)},ur.prototype.onError=function(t){this.history.onError(t)},ur.prototype.push=function(t,r,n){this.history.push(t,r,n)},ur.prototype.replace=function(t,r,n){this.history.replace(t,r,n)},ur.prototype.go=function(t){this.history.go(t)},ur.prototype.back=function(){this.go(-1)},ur.prototype.forward=function(){this.go(1)},ur.prototype.getMatchedComponents=function(t){var r=t?t.matched?t:this.resolve(t).route:this.currentRoute;return r?[].concat.apply([],r.matched.map(function(t){return Object.keys(t.components).map(function(r){return t.components[r]})})):[]},ur.prototype.resolve=function(t,r,n){var e=st(t,r||this.history.current,n,this),i=this.match(e,r),o=i.redirectedFrom||i.fullPath,a=this.history.base,u=sr(a,o,this.mode);return{location:e,route:i,href:u,normalizedTo:e,resolved:i}},ur.prototype.addRoutes=function(t){this.matcher.addRoutes(t),this.history.current!==g&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(ur.prototype,cr),ur.install=U,ur.version="3.0.2",I&&window.Vue&&window.Vue.use(ur),r["a"]=ur}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,